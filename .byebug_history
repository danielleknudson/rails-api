c
exit
res.count
res = User.skip(20).limit(20).to_a
User.skip(20).limit(20).count
User.skip(20).limit(20)
User.count
User.skip(20).count
skip
n
total
n
page
n
exit
c
users.length
User.all.skip(skip).count
User.all.skip(skip)
User.all.skip(skip).limit(20).count
users.count
n
total - 20
total
n
page
n
page
params
exit
User.destroy_all
User.count
params
c
exit
response.status
exit
expect(response.body.empty?).to be(true)
expect(response.body.empty?).to be.true
expect(response.body.empty?).to.be.true
expect(response.body).to.be.empty
JSON.parse(response.body)
response.body
exit
JSON.parse(response.body, symbolize_names: true
SON.parse(response.body, symbolize_names: true)
exit
response.body
exit
current_user
params
exit
response.body
response
exit
@auth.authenticate_with_token!
c
@auth.authenticate_with_token!
exit
JSON.parse(response.body, symbolize_names: true)
@user.auth_token
exit
response
JSON.parse(response.body)
response['status']
response
response.body
c
session_response
c
n
params
exit
response.body
response
c
response
exit
User.destroy_all
User.all.map(&:email)
User.count
params
n
response
post :create, { session: credentials }, format: :json
n
c
n
exit
post :create, { session: credentials }, format: :json
response
exit
c
User.count
c
User.count
c
n
c
halted
n
User.where(auth_token: token).first.nil?
token
n
s
self.auth_token
params
param
c
n
attributes
n
s
n
exit
user.errors
user.update(user_params)
n
user_params
user.present?
n
c
response
c
response
c
n
user.errors
n
c
self.auth_token
s
n
c
password
email
user.errors
user
n
c
user.errors
user.save
n
c
user.errors
n
c
params
User.all.map(&:email)
User.map(&:email)
User.count
Users.count
user.errors
user.save
n
user.valid_password?(password)
user.valid_password?(pasword)
n
user.present?
email.present?
n
c
params
c
params
c
JSON.parse(response.body, symbolize_names: true)
c
JSON.parse(response)
JSON.parse(response.body)
post :create, { session: {email: @user.email, password: @user.password } }, format: :json
post :create, { session: credentials }, format: :json
c
responsec
response
c
n
user
n
n\
session_params[:email]
params
c
n
@user.auth_token
existing_user.auth_token
c
n
User.count
n
User.count
c
n
s
attr
s
c
n
page
c
skip
n
page
c
params.fetch(:page, 1)
params
c
user.errors
n
user.user_json
user_params
n
c
user.present?
user
n
params
c
params[:id]
user_params
params
User.where(_id: params[:_id]).first
params
c
@user._id.to_s
@user
c
options.fetch(:default)
options.fetch(:version)
options
